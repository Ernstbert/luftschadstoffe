{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joachim\\\\Documents\\\\WebDev_Playground_2023\\\\luftschadstoffe\\\\src\\\\components\\\\LineChart.tsx\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, registerables } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst LineChart = ({\n  data,\n  selectedCategories\n}) => {\n  if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 42\n  }, this);\n\n  // Find all keys that are UNIX timestamps (years)\n  const yearKeys = Object.keys(data[0]).filter(key => /^\\d{9,}$/.test(key));\n\n  // Convert UNIX timestamps to year strings for chart labels\n  const years = yearKeys.map(ts => {\n    const d = new Date(Number(ts));\n    return d.getFullYear().toString();\n  });\n\n  // Build datasets for selected categories\n  const datasets = data.filter(row => selectedCategories.includes(row[\"Emission source categories\"])).map(row => ({\n    label: row[\"Emission source categories\"],\n    data: yearKeys.map(ts => Number(row[ts])),\n    fill: false,\n    borderColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n  }));\n\n  // Debug output\n  console.log(\"yearKeys:\", yearKeys);\n  console.log(\"years:\", years);\n  console.log(\"datasets:\", datasets);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: {\n      labels: years,\n      datasets\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          display: false\n        }\n      },\n      scales: {\n        x: {\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 12\n          }\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","Line","Chart","registerables","jsxDEV","_jsxDEV","register","LineChart","data","selectedCategories","length","children","fileName","_jsxFileName","lineNumber","columnNumber","yearKeys","Object","keys","filter","key","test","years","map","ts","d","Date","Number","getFullYear","toString","datasets","row","includes","label","fill","borderColor","Math","floor","random","console","log","labels","options","responsive","plugins","legend","display","scales","x","ticks","autoSkip","maxTicksLimit","_c","$RefreshReg$"],"sources":["C:/Users/Joachim/Documents/WebDev_Playground_2023/luftschadstoffe/src/components/LineChart.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nChart.register(...registerables);\r\n\r\ninterface Props {\r\n  data: any[];\r\n  selectedCategories: string[];\r\n}\r\n\r\nconst LineChart: React.FC<Props> = ({ data, selectedCategories }) => {\r\n  if (!data || data.length === 0) return <div>No data available.</div>;\r\n\r\n  // Find all keys that are UNIX timestamps (years)\r\n  const yearKeys = Object.keys(data[0]).filter(\r\n    (key) => /^\\d{9,}$/.test(key)\r\n  );\r\n\r\n  // Convert UNIX timestamps to year strings for chart labels\r\n  const years = yearKeys.map((ts) => {\r\n    const d = new Date(Number(ts));\r\n    return d.getFullYear().toString();\r\n  });\r\n\r\n  // Build datasets for selected categories\r\n  const datasets = data\r\n    .filter((row) => selectedCategories.includes(row[\"Emission source categories\"]))\r\n    .map((row) => ({\r\n      label: row[\"Emission source categories\"],\r\n      data: yearKeys.map((ts) => Number(row[ts])),\r\n      fill: false,\r\n      borderColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n    }));\r\n\r\n  // Debug output\r\n  console.log(\"yearKeys:\", yearKeys);\r\n  console.log(\"years:\", years);\r\n  console.log(\"datasets:\", datasets);\r\n\r\n  return (\r\n    <Line\r\n      data={{\r\n        labels: years,\r\n        datasets,\r\n      }}\r\n      options={{\r\n        responsive: true,\r\n        plugins: {\r\n          legend: { display: false },\r\n        },\r\n        scales: {\r\n          x: { ticks: { autoSkip: true, maxTicksLimit: 12 } },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAOhC,MAAMI,SAA0B,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAmB,CAAC,KAAK;EACnE,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,oBAAOL,OAAA;IAAAM,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAEpE;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC,CAACW,MAAM,CACzCC,GAAG,IAAK,UAAU,CAACC,IAAI,CAACD,GAAG,CAC9B,CAAC;;EAED;EACA,MAAME,KAAK,GAAGN,QAAQ,CAACO,GAAG,CAAEC,EAAE,IAAK;IACjC,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAACC,MAAM,CAACH,EAAE,CAAC,CAAC;IAC9B,OAAOC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACnC,CAAC,CAAC;;EAEF;EACA,MAAMC,QAAQ,GAAGtB,IAAI,CAClBW,MAAM,CAAEY,GAAG,IAAKtB,kBAAkB,CAACuB,QAAQ,CAACD,GAAG,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAC/ER,GAAG,CAAEQ,GAAG,KAAM;IACbE,KAAK,EAAEF,GAAG,CAAC,4BAA4B,CAAC;IACxCvB,IAAI,EAAEQ,QAAQ,CAACO,GAAG,CAAEC,EAAE,IAAKG,MAAM,CAACI,GAAG,CAACP,EAAE,CAAC,CAAC,CAAC;IAC3CU,IAAI,EAAE,KAAK;IACXC,WAAW,EAAE,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAACT,QAAQ,CAAC,EAAE;EACrE,CAAC,CAAC,CAAC;;EAEL;EACAU,OAAO,CAACC,GAAG,CAAC,WAAW,EAAExB,QAAQ,CAAC;EAClCuB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAElB,KAAK,CAAC;EAC5BiB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEV,QAAQ,CAAC;EAElC,oBACEzB,OAAA,CAACJ,IAAI;IACHO,IAAI,EAAE;MACJiC,MAAM,EAAEnB,KAAK;MACbQ;IACF,CAAE;IACFY,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;QACPC,MAAM,EAAE;UAAEC,OAAO,EAAE;QAAM;MAC3B,CAAC;MACDC,MAAM,EAAE;QACNC,CAAC,EAAE;UAAEC,KAAK,EAAE;YAAEC,QAAQ,EAAE,IAAI;YAAEC,aAAa,EAAE;UAAG;QAAE;MACpD;IACF;EAAE;IAAAvC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACqC,EAAA,GA9CI7C,SAA0B;AAgDhC,eAAeA,SAAS;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}