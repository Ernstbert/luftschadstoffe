{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joachim\\\\Documents\\\\WebDev_Playground_2023\\\\luftschadstoffe\\\\src\\\\components\\\\LineChart.tsx\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, registerables } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst getYearKeys = row => Object.keys(row).filter(key => /^\\d{9,}$/.test(key));\nconst LineChart = ({\n  data,\n  selectedCategories\n}) => {\n  if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 42\n  }, this);\n  const yearKeys = getYearKeys(data[0]);\n  const years = yearKeys.map(ts => new Date(Number(ts)).getFullYear().toString());\n  const datasets = data.filter(row => selectedCategories.includes(row[\"Emission source categories\"])).map((row, idx) => ({\n    label: row[\"Emission source categories\"],\n    data: yearKeys.map(ts => Number(row[ts])),\n    fill: false,\n    borderColor: `hsl(${idx * 60 % 360}, 70%, 50%)`,\n    tension: 0.2\n  }));\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: {\n      labels: years,\n      datasets\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true\n        }\n      },\n      scales: {\n        x: {\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 12\n          }\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","Line","Chart","registerables","jsxDEV","_jsxDEV","register","getYearKeys","row","Object","keys","filter","key","test","LineChart","data","selectedCategories","length","children","fileName","_jsxFileName","lineNumber","columnNumber","yearKeys","years","map","ts","Date","Number","getFullYear","toString","datasets","includes","idx","label","fill","borderColor","tension","labels","options","responsive","plugins","legend","display","scales","x","ticks","autoSkip","maxTicksLimit","_c","$RefreshReg$"],"sources":["C:/Users/Joachim/Documents/WebDev_Playground_2023/luftschadstoffe/src/components/LineChart.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport { NoxData } from \"./Dashboard\";\r\nChart.register(...registerables);\r\n\r\ninterface Props {\r\n  data: NoxData[];\r\n  selectedCategories: string[];\r\n}\r\n\r\nconst getYearKeys = (row: NoxData) =>\r\n  Object.keys(row).filter((key) => /^\\d{9,}$/.test(key));\r\n\r\nconst LineChart: React.FC<Props> = ({ data, selectedCategories }) => {\r\n  if (!data || data.length === 0) return <div>No data available.</div>;\r\n\r\n  const yearKeys = getYearKeys(data[0]);\r\n  const years = yearKeys.map((ts) => new Date(Number(ts)).getFullYear().toString());\r\n\r\n  const datasets = data\r\n    .filter((row) => selectedCategories.includes(row[\"Emission source categories\"]))\r\n    .map((row, idx) => ({\r\n      label: row[\"Emission source categories\"],\r\n      data: yearKeys.map((ts) => Number(row[ts])),\r\n      fill: false,\r\n      borderColor: `hsl(${(idx * 60) % 360}, 70%, 50%)`,\r\n      tension: 0.2,\r\n    }));\r\n\r\n  return (\r\n    <Line\r\n      data={{\r\n        labels: years,\r\n        datasets,\r\n      }}\r\n      options={{\r\n        responsive: true,\r\n        plugins: {\r\n          legend: { display: true },\r\n        },\r\n        scales: {\r\n          x: { ticks: { autoSkip: true, maxTicksLimit: 12 } },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAOhC,MAAMI,WAAW,GAAIC,GAAY,IAC/BC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM,CAAEC,GAAG,IAAK,UAAU,CAACC,IAAI,CAACD,GAAG,CAAC,CAAC;AAExD,MAAME,SAA0B,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAmB,CAAC,KAAK;EACnE,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,oBAAOZ,OAAA;IAAAa,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEpE,MAAMC,QAAQ,GAAGhB,WAAW,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMS,KAAK,GAAGD,QAAQ,CAACE,GAAG,CAAEC,EAAE,IAAK,IAAIC,IAAI,CAACC,MAAM,CAACF,EAAE,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;EAEjF,MAAMC,QAAQ,GAAGhB,IAAI,CAClBJ,MAAM,CAAEH,GAAG,IAAKQ,kBAAkB,CAACgB,QAAQ,CAACxB,GAAG,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAC/EiB,GAAG,CAAC,CAACjB,GAAG,EAAEyB,GAAG,MAAM;IAClBC,KAAK,EAAE1B,GAAG,CAAC,4BAA4B,CAAC;IACxCO,IAAI,EAAEQ,QAAQ,CAACE,GAAG,CAAEC,EAAE,IAAKE,MAAM,CAACpB,GAAG,CAACkB,EAAE,CAAC,CAAC,CAAC;IAC3CS,IAAI,EAAE,KAAK;IACXC,WAAW,EAAE,OAAQH,GAAG,GAAG,EAAE,GAAI,GAAG,aAAa;IACjDI,OAAO,EAAE;EACX,CAAC,CAAC,CAAC;EAEL,oBACEhC,OAAA,CAACJ,IAAI;IACHc,IAAI,EAAE;MACJuB,MAAM,EAAEd,KAAK;MACbO;IACF,CAAE;IACFQ,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;QACPC,MAAM,EAAE;UAAEC,OAAO,EAAE;QAAK;MAC1B,CAAC;MACDC,MAAM,EAAE;QACNC,CAAC,EAAE;UAAEC,KAAK,EAAE;YAAEC,QAAQ,EAAE,IAAI;YAAEC,aAAa,EAAE;UAAG;QAAE;MACpD;IACF;EAAE;IAAA7B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAC2B,EAAA,GAjCInC,SAA0B;AAmChC,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}